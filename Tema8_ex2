class PushdownAutomaton:
    def __init__(self):
        self.stack = ['Z']  # Stiva, inițializată cu simbolul de stivă inițial 'Z'
        self.current_state = 'q'  # Starea inițială

    def transition(self, symbol):
        if symbol == '0':
            self.stack.append('0')  # Adăugăm '0' în stivă
        elif symbol == '1':
            if self.stack[-1] == '0':
                self.stack.pop()  # Eliminăm '0' din stivă
            else:
                return False  # Dacă stiva este goală sau conține un '1', automatul este într-o stare neacceptabilă
        else:
            return False  # Dacă se găsește un simbol nevalid, automatul este într-o stare neacceptabilă
        return True

    def accept(self, input_string):
        for symbol in input_string:
            if not self.transition(symbol):
                return False
        return len(self.stack) == 1 and self.stack[0] == 'Z'  # Verificăm dacă stiva este goală la final

# Testare
automaton = PushdownAutomaton()
input_string1 = "0011"
input_string2 = "0101"
print("Testare 1:", automaton.accept(input_string1))  # Așteptat: True
print("Testare 2:", automaton.accept(input_string2))  # Așteptat: False
